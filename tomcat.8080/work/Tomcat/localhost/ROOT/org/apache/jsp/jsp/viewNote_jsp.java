/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-16 00:20:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import uk.ac.ucl.model.Note;
import uk.ac.ucl.model.TextNote;
import uk.ac.ucl.model.UrlNote;
import uk.ac.ucl.model.ImageNote;
import java.util.List;
import uk.ac.ucl.model.Category;

public final class viewNote_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(8);
    _jspx_imports_classes.add("uk.ac.ucl.model.ImageNote");
    _jspx_imports_classes.add("uk.ac.ucl.model.Category");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("uk.ac.ucl.model.Note");
    _jspx_imports_classes.add("uk.ac.ucl.model.TextNote");
    _jspx_imports_classes.add("uk.ac.ucl.model.UrlNote");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>View Note</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            background-color: #f5f5f5;\r\n");
      out.write("        }\r\n");
      out.write("        .container {\r\n");
      out.write("            max-width: 800px;\r\n");
      out.write("            margin: 0 auto;\r\n");
      out.write("            background-color: white;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n");
      out.write("        }\r\n");
      out.write("        h1 {\r\n");
      out.write("            color: #333;\r\n");
      out.write("            margin-top: 0;\r\n");
      out.write("        }\r\n");
      out.write("        .note-info {\r\n");
      out.write("            color: #666;\r\n");
      out.write("            font-size: 0.9em;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .note-content {\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("            line-height: 1.6;\r\n");
      out.write("        }\r\n");
      out.write("        .note-image {\r\n");
      out.write("            max-width: 100%;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .actions {\r\n");
      out.write("            margin-top: 30px;\r\n");
      out.write("            padding-top: 20px;\r\n");
      out.write("            border-top: 1px solid #eee;\r\n");
      out.write("        }\r\n");
      out.write("        .actions a {\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            margin-right: 10px;\r\n");
      out.write("            padding: 8px 16px;\r\n");
      out.write("            background-color: #4285f4;\r\n");
      out.write("            color: white;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            border-radius: 4px;\r\n");
      out.write("        }\r\n");
      out.write("        .actions .delete {\r\n");
      out.write("            background-color: #dc3545;\r\n");
      out.write("        }\r\n");
      out.write("        .categories {\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("            color: #666;\r\n");
      out.write("        }\r\n");
      out.write("        .categories span {\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            margin-right: 10px;\r\n");
      out.write("            padding: 4px 8px;\r\n");
      out.write("            background-color: #f1f1f1;\r\n");
      out.write("            border-radius: 4px;\r\n");
      out.write("            font-size: 0.9em;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        ");
 
        Note note = (Note) request.getAttribute("note");
        List<Category> categories = (List<Category>) request.getAttribute("categories");
        
        if (note != null) {
        
      out.write("\r\n");
      out.write("            <h1>");
      out.print( note.getName() );
      out.write("</h1>\r\n");
      out.write("            \r\n");
      out.write("            <div class=\"note-info\">\r\n");
      out.write("                Created: ");
      out.print( note.getCreatedAt() );
      out.write("\r\n");
      out.write("                ");
 String updatedAt = note.getUpdatedAt(); 
      out.write("\r\n");
      out.write("                ");
 if (!updatedAt.equals("N/A") && !updatedAt.equals(note.getCreatedAt())) { 
      out.write("\r\n");
      out.write("                    | Last modified: ");
      out.print( updatedAt );
      out.write("\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("            \r\n");
      out.write("            ");
 if (categories != null && !categories.isEmpty()) { 
      out.write("\r\n");
      out.write("                <div class=\"categories\">\r\n");
      out.write("                    Categories: \r\n");
      out.write("                    ");
 for (Category category : categories) { 
      out.write("\r\n");
      out.write("                        <span><a href=\"viewCategory?id=");
      out.print( category.getId() );
      out.write('"');
      out.write('>');
      out.print( category.getName() );
      out.write("</a></span>\r\n");
      out.write("                    ");
 } 
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            <div class=\"note-content\">\r\n");
      out.write("                ");
 if (note instanceof TextNote) { 
      out.write("\r\n");
      out.write("                    ");
      out.print( ((TextNote) note).getText() );
      out.write("\r\n");
      out.write("                ");
 } else if (note instanceof UrlNote) { 
      out.write("\r\n");
      out.write("                    <p><strong>URL:</strong> <a href=\"");
      out.print( ((UrlNote) note).getUrl() );
      out.write("\" target=\"_blank\">");
      out.print( ((UrlNote) note).getUrl() );
      out.write("</a></p>\r\n");
      out.write("                    <p><strong>Description:</strong> ");
      out.print( ((UrlNote) note).getDescription() );
      out.write("</p>\r\n");
      out.write("                ");
 } else if (note instanceof ImageNote) { 
      out.write("\r\n");
      out.write("                    <img src=\"");
      out.print( ((ImageNote) note).getImageFilePath() );
      out.write("\" alt=\"");
      out.print( ((ImageNote) note).getCaption() );
      out.write("\" class=\"note-image\">\r\n");
      out.write("                    <p><strong>Caption:</strong> ");
      out.print( ((ImageNote) note).getCaption() );
      out.write("</p>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("            \r\n");
      out.write("            <div class=\"actions\">\r\n");
      out.write("                <a href=\"editNote?id=");
      out.print( note.getId() );
      out.write("\">Edit Note</a>\r\n");
      out.write("                <a href=\"manageNoteCategories?id=");
      out.print( note.getId() );
      out.write("\">Manage Categories</a>\r\n");
      out.write("                <a href=\"deleteNote?id=");
      out.print( note.getId() );
      out.write("\" class=\"delete\" onclick=\"return confirm('Are you sure you want to delete this note?')\">Delete Note</a>\r\n");
      out.write("                <a href=\"index\">Back to Index</a>\r\n");
      out.write("            </div>\r\n");
      out.write("        ");
 } else { 
      out.write("\r\n");
      out.write("            <p>Note not found.</p>\r\n");
      out.write("            <div class=\"actions\">\r\n");
      out.write("                <a href=\"index\">Back to Index</a>\r\n");
      out.write("            </div>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html> ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
